JS笔记
JavaScript组成
各组成部分的兼容性，兼容性问题由来
ECMAScript：翻译	核心	解释器
DOM	Document Object Model		HTML		document
	    操作HTML的能力
BOM	Browser Object Model		浏览器		window
ECMA		几乎没有兼容性问题
DOM		有一些操作不兼容
BOM		没有兼容问题（完全不兼容）
命名规范
可读性
（给变量命名需要前缀，给函数命名不需要前缀）匈牙利命名法：类型前缀，首字母大写
+  1.字符串连接 2.数字相加
-   1.数字相减（隐式类型转换）

索引值的使用
什么时候使用索引值，需要知道第几个的时候 
Html中添加index，会被过滤，js中添加不会过滤。

Alert(‘abc’+(12+5)+’def’);输出abc17def
Alert(‘abc’+12+5+’def’);输出abc125def

网页换肤，两套css链接<link>中的href link可以加id
function skin1(){
var ol = document.getElementById("");
ol.href = 'css1.css';
}
function skin2(){
var ol = document.getElementById("");
ol.href = 'css2.css';
}
再调用函数
任何标签都可以加id
任何标签的任何属性js怎么写

1.document.getElementById在任何浏览器下均可使用
2.get Element By Id
获取 元素   用 ID		通过ID获取元素
3.function 函数名()
{
	代码
}
函数名()
4.当点击的时候
如果div是显示的，隐藏掉
或者，显示出来
如果div是显示的，oDiv.style.display='none'
或者，oDiv.style.display='block'
if(div是显示的)
{
oDiv.style.display='none';
}
else
{
	oDiv.style.display='block';
}
5.=	赋值（改变）   ==	判断
6.函数传参：参数就是占位符
什么时候用传参——函数里定不下来的东西
7.style与className
元素.style.属性=xxx 是修改行间样式
之后再修改className不会有效果
8.获取一组元素
getElementsByTagName
9.用for循环为一组元素添加事件
什么时候用循环——一组元素
例子：
全选——checked属性
反选——for循环配合if判断
Break整个循环中断
Continue 本次循环中断，继续下次循环

真:true  非零数字 非空字符串 非空对象
假:false 数字零 空字符串 空对象 undefined

Json没有length
Arr有length属性，数组循环一般用length循环
Json循环 
10.选项卡
按钮的实现
添加事件
this的使用
先清空所有按钮，再选中当前按钮
内容的实现(div)
先隐藏所有Div，再显示”当前”Div
索引值的使用
什么时候用索引值——需要知道“第几个”的时候
html添加index——会被FF过滤
js添加index
11.字面量（常量）：看到东西，自然之道是什么
12.样式优先级：
*<标签<class<ID<行间
13.function 名字()
{
	...
}
oBtn.onclick=名字
oBtn.onclick=function ()
{
	....
};
14.window.onload		页面加载完成的时候发生
15.行为、样式、结构三者分离
JS	   CSS	   HTML
16.类型：typeof运算符
用法、返回值
常见类型：
number、string、boolean、undefined、object、function
一个变量应该只存放一种类型的数据
17.字符串转数字parseInt()：输出为整数
     parseFloat();可输出为小数，也可以是小数
从左到右碰到不是数字，则跳出。
NaN: Not a Number非数字
任何数和NaN相加都为NaN
NaN和NaN不相等
isNaN();判断是否是NaN
18.== 双等号，先转换类型，然后比较
=== 三等号，不转换类型，直接比较
19.什么是闭包
子函数可以使用父函数中的局部变量
20.算术：+ 加、- 减、* 乘、/ 除、% 取模
实例：隔行变色、秒转时间
赋值：=、+=、-=、*=、/=、%=
关系：<、>、<=、>=、==、===、!=、!==
逻辑：&& 与、|| 或、! 否
实例：全选与反选
运算符优先级：括号
21.一个函数应该只返回一种类型的值
22.可变参（不定参）：arguments
参数的个数可变，参数数组
例子1：求和  求所有参数的和
例子2：CSS函数
判断arguments.length
给参数取名，增强可读性
取非行间样式(不能用来设置)：
obj.currentStyle[attr]获取非行间样式 currentStyle 只兼容IE或者高的谷歌
getComputedStyle(obj, false)[attr]可兼容获取元素，第二个参数随意值（false）（IE9之前不可用）
例：css(oDiv, 'width')	获取样式
css(oDiv, 'width', '200px')	设置样式
复合样式：background、border
单一样式：width、height、position
23.数组的使用
定义：
var arr=[12, 5, 8, 9];
var arr=new Array(12, 5, 8, 9);
没有任何差别，[]的性能略高，因为代码短
数组的属性：
length
既可以获取，又可以设置
例子：快速清空数组
数组使用原则：数组中应该只存一种类型的变量
24.数组的方法
添加
push(元素)，从尾部添加
unshift(元素)，从头部添加
删除
pop()，从尾部弹出
shift()，从头部弹出
25.排序：
sort([比较函数])，排序一个数组
排序一个字符串数组
排序一个数字数组
转换类：
concat(数组2)
连接两个数组
join(分隔符)
用分隔符，组合数组元素，生成字符串
字符串split
splice
splice(开始, 长度,元素…)
先删除，后插入
删除
splice(开始,长度)
插入
splice(开始, 0, 元素…)
替换
25.开启定时器
setInterval	间隔型
setTimeout	延时型
两种定时器的区别
停止定时器
clearInterval
clearTimeout
26.数码时钟
获取系统时间
Date对象
getHours、getMinutes、getSeconds
显示系统时间
年getFullYear()
月getMonth()
日getDate()
星期getDay()
字符串连接
空位补零
设置图片路径
charAt方法
27.延时提示框
原来的方法
移入显示，移出隐藏
移出延时隐藏
移入下面的Div后，还是隐藏了
简化代码
合并两个相同的mouseover和mouseout
28.无缝滚动——基础
物体运动基础
让Div移动起来
offsetLeft的作用offsetLeft获取左边距，综合考虑能影响元素所有左边距属性。
用定时器让物体连续移动
效果原理
让ul一直向左移动
复制li
innerHTML和+=
修改ul的width
滚动过界后，重设位置
判断过界
改变滚动方向
修改speed
修改判断条件
鼠标移入暂停
移入关闭定时器
移出重新开启定时器
29.运动基础
让Div运动起来
速度——物体运动的快慢
运动中的Bug
不会停止
速度取某些值会无法停止
到达位置后再点击还会运动
重复点击速度加快
匀速运动
速度不变
30.运动框架
在开始运动时，关闭已有定时器
把运动和停止隔开(if/else)
运动框架实例
例子1：“分享到”侧边栏
通过目标点，计算速度值
例子2：淡入淡出的图片
用变量存储透明度
30.缓冲运动
逐渐变慢，最后停止
距离越远速度越大
速度由距离决定
速度=(目标值-当前值)/缩放系数
例子：缓冲菜单
Bug：速度取整
跟随页面滚动的缓冲侧边栏
潜在问题：目标值不是整数时
31.运动终止条件
匀速运动：距离足够近
缓冲运动：两点重合
32.多个物体同时运动
例子：多个Div，鼠标移入变宽
单定时器，存在问题
每个Div一个定时器
多物体运动框架
定时器作为物体的属性
参数的传递：物体、目标值
例子：多个Div淡入淡出
所有东西都不能公用
属性与运动对象绑定：速度、其他属性值（如透明度等）
33.offset属性的Bug
 有边框的Div变宽
   用currentStyle代替offset
原有运动框架的问题
  只能让某个值运动起来
  如果想让其他值运动起来，要修改程序
扩展的运动框架
运动属性作为参数
封装opacity
  小数的问题
34.效果思路
两边的按钮——淡入淡出
大图下拉——层级、高度变化
下方的li——多物体淡入淡出
下方的Ul——位置计算
左右按钮
淡入淡出
鼠标移到按钮上，按钮会消失
层级问题
按钮和遮罩上都得加上事件
下方Li效果
点击切换大图——选项卡
Li淡入淡出——移入移出
Ul移动——位置计算
大图片切换
图片层级——zIndex一直加1
图片下拉效果(运动框架)
可以改为淡入淡出
加入自动播放
和选项卡一样
35.什么是event对象
用来获取事件的详细信息：鼠标位置、键盘按键
例子：获取鼠标位置：clientX
document的本质：document.childNodes[0].tagName
获取event对象(兼容性写法)
var oEvent=ev||event;

事件流
事件冒泡
取消冒泡：oEvent.cancelBubble=true
例子：仿select控件
DOM事件流
36.鼠标位置

用clientX,Y一定要用scrollTop
clientY 鼠标可视区位置
可视区位置：clientX、clientY
例子1：跟随鼠标的Div
消除滚动条的影响
滚动条的意义——可视区与页面顶部的距离
获取鼠标在页面的绝对位置
封装函数
例子2：一串跟随鼠标的Div
37.keyCode
获取用户按下键盘的哪个按键
例子：键盘控制Div移动
其他属性
ctrlKey、shiftKey、altKey
例子：提交留言
回车 提交
ctrl+回车 提交
38.阻止默认行为
普通写法：return false;
例子1.	屏蔽右键菜单
弹出自定义右键菜单
例子2.	只能输入数字的输入框
keydown、keyup事件的区别
39.简易拖拽
拖拽原理
距离不变
三个事件
靠谱拖拽
原有拖拽的问题
直接给document加事件
FF下，空Div拖拽Bug
阻止默认事件
防止拖出页面
修正位置
40.事件绑定
setCapture 不会选中文字，事件捕获只有IE兼容，整个网页的所有事件都会聚集在一个div上
releaseCapture();取消事件捕获

oDiv.setCapture();集中在oDiv上。

Document改为oDiv（IE下）

IE方式
attachEvent(事件名称, 函数)，绑定事件处理函数
detachEvent(事件名称, 函数)，解除绑定
DOM方式
addEventListener(事件名称,函数, 捕获)
removeEventListener(事件名称, 函数, 捕获)

为什么给document加事件，因为div太小鼠标就跑了，div被甩掉。
何时使用事件绑定
绑定事件和this
绑定匿名函数，会无法删除
41.复习拖拽原理
距离不变
三个事件：down、move、up
限制范围
对位置进行判断
例子1：不能拖出窗口的Div
例子2：不能拖出指定对象的Div
磁性吸附
42.图片拖拽
阻止默认事件
文字选中
阻止默认事件
IE下拖动有问题
事件捕获
与DOM配合
带框的拖拽
保留原有位置的拖拽
43.拖拽
只有横向拖拽
限制范围——范围的大小
计算比例——当前值/最大值
控制其他对象
例子1：控制物体的大小
例子2：控制物体的透明度
例子3：控制文字滚动
44.什么是对象
什么是收音机
对象是一个整体，对外提供一些操作
什么是面向对象
使用对象时，只关注对象提供的功能，不关注其内部细节
比如JQuery
面向对象（）
不了解原理的情况下，使用它内部的功能。（使用对象时，只关注对象提供的功能，不关注其内部细节。比如：jQuery）

对象：
黑盒子，不了解内部结构，知道表面的各种操作（按钮）duixian
对象是一个整体，对外提供一些操作。
面向对象是一种通用思想，并非只有编程中能用，任何事情都可以用
45.js面向对象
对象：属性+方法
继承：父级的属性+方法
面向对象编程(OOP)的特点
抽象：抓住核心问题
封装：不考虑内部实现，只考虑功能使用
继承：从已有对象上，继承出新的对象
多重继承
多态
对象的组成
方法——函数：过程、动态的
属性——变量：状态、静态的
变量能做的事情，属性也能做。
变量：自由的，不属于任何人
属性：属于一个对象的
函数：自由
方法：属于对象
46.为对象添加方法和属性
this详解，事件处理中this的本质
window
this——函数属于谁
This:当前发生事件的对象（之前）
当前的方法属于谁，this就是谁
不能在系统对象中随意附加方法、属性，否则会覆盖已有方法、属性
object对象
47.什么是工厂
原料 加工 出厂
工厂方式
用构造函数创建一个类
什么是类、对象（实例）：模具和零件
48.问题
没有new
函数重复定义
加上new
偷偷做了两件事
替你创建了一个空白对象
替你返回了这个对象
new和this
49.什么是原型prototype
原型是class，修改他可以影响一类元素
在已有对象中加入自己的属性、方法
原型修改对已有对象的影响
为Array添加sum方法
给对象添加方法，类似于行间样式
给原型添加方法，类似于class
原型的小缺陷
无法限制覆盖
50.流行的面向对象编写方式
用混合方式构造对象
混合的的构造函数/原型方式
Mixed Constructor Function/Prototype Method
原则
构造函数：加属性
原型：加方法
对象命名规范
类名首字母大写
51实例：面向对象的选项卡.
把面向过程的程序，改写成面向对象的形式
原则：
不能有函数套函数、但可以有全局变量
过程
onload	→	构造函数
全局变量	→	属性
函数		→	方法
改错
this、事件、闭包、传参
对象与闭包
通过闭包传递this
52.Json方式的面向对象
把方法包在一个Json里
有人管他叫——命名空间
在公司里，把同一类方法，包在一起
53.面向对象的拖拽
改写原有拖拽
对象的继承
什么是继承
在原有类的基础上，略作修改，得到一个新的类
不影响原有类的功能
instanceof运算符
查看对象是否是某个类的实例
53.限制范围的拖拽类
构造函数伪装
属性的继承
原理：欺骗构造函数
call的使用
原型链
方法的继承
原理：复制方法
覆盖原型和方法复制
54.本地对象（非静态对象）
什么是本地对象
常用对象
Object、Function、Array、String、Boolean、Number、Date、RegExp、Error
内置对象（静态对象）
什么是本地对象
Global、Math
宿主对象（由浏览器提供的对象）
DOM、BOM
宿主：运行环境（浏览器）
本地对象+内置对象（JS语言本身具备的，跟环境无关）
静态对象：不能new没直接用的 代表 Math
非静态对象：必须new,实例化才能用的对象
55.DOM基础
DOM document 操作浏览器上的元素
childNodes（子节点）算空的文本节点 在IE6—8不会出问题。
Children 只取第一层

Asdasd文本节点
<span>.fasdf元素节点</span>
nodeType==3文本节点
nodeType==1元素节点
什么是DOM
浏览器支持情况
DOM节点
childNodes	 nodeType
获取子节点
children
parentNode
例子：点击链接，隐藏整个li
offsetParent获取有定位的父级，根据样式会改变
例子：获取元素在页面上的实际位置
56.DOM节点(2)
首尾子节点
有兼容性问题
firstChild、firstElementChild 
lastChild 、lastElementChild
兄弟节点
有兼容性问题
nextSibling、nextElementSibling
previousSibling、previousElementSibling
57.元素属性操作
第一种：oDiv.style.display=“block”;
第二种：oDiv.style[“display”]=“block”;
第三种：Dom方式
DOM方式操作元素属性
获取：getAttribute(名称)
设置：setAttribute(名称, 值)
删除：removeAttribute(名称)
58.用className选择元素
如何用className选择元素
选出所有元素
通过className条件筛选
封装成函数
59.创建DOM元素
createElement(标签名)		创建一个节点
appendChild(节点)			追加一个节点
例子：为ul插入li
插入元素
insertBefore(节点, 原有节点)	在已有元素前插入
父级.insertBefore（子节点，哪个位置前）
例子：倒序插入li
删除DOM元素
removeChild(节点)			删除一个节点
例子：删除li
60.文档碎片
文档碎片可以提高DOM操作性能(理论上)
文档碎片原理
document.createDocumentFragment() 创建文档碎片
文档碎片理论上可以提高效率（IE6-7才会有些效果，高级浏览器不会有很多影响，基本没有用了，甚至可能会降低性能）
61.表格应用
Tbody浏览器会自动加上，最好主动写上。
tBodies获取tbody
Rows行
Cells取行中单元格
只能有一个标头，可以有很多tbody
获取
tBodies、tHead、tFoot、rows、cells
隔行变色
鼠标移入高亮
添加、删除一行
DOM方法的使用
62.搜索
版本1：基础版本——字符串比较
版本2：忽略大小写——大小写转换
版本3：模糊搜索——search的使用
版本4：多关键词——split
高亮显示、筛选
排序
移动Li
元素排序：转换——排序——插入
63.表单基础知识
什么是表单
向服务器提交数据，比如：用户注册
action		提交到哪里 
表单事件
onsubmit	提交时发生
onreset		重置时发生
64.表单内容验证
阻止用户输入非法字符		阻止事件
输入时、失去焦点时验证		onkeyup、onblur
提交时检查				onsubmit
*后台数据检查
65.BOM
Document.write();先清空，再写
打开、关闭窗口
open
蓝色理想运行代码功能
close
关闭时提示问题
常用属性
window.navigator.userAgent判断当前浏览器类型，操作系统类型
Window.location 当前网页地址
窗口尺寸、工作区尺寸
srocllTop可视区距离顶部的距离
可视区尺寸
document.documentElement.clientWidth
document.documentElement.clientHeight
滚动距离
document.body.scrollTop
document.documentElement.scrollTop
66.系统对话框
警告框：alert(“内容”)，没有返回值
选择框：confirm(“提问的内容”)，返回boolean
输入框：prompt()，返回字符串或null
window对象常用事件
onload
onscroll
Onresize
Window.onresize当窗口改变大小是发生
userAgent>IE6  fixed
IE6         	  运动
例子：回到顶部按钮、侧边栏广告
闪烁问题
Ajax

让js可以读取或者发送服务器上的数据（不用刷新页面）

什么是服务器
PC，手机也能作为服务器
Locallhost 本地主机
自己配一个服务器，把文件存在www下
Function alax(url,fnSucc,fnFild){}
第一个参数，从哪去取
第二个参数，读成功，回来的时候，会主动访问自己写的一个函数
不成功返回fnFile
放在服务器下的文件，不能用中文命名
统一存储编码都是UTF-8或者其他。
缓存
根据url来缓存的
域名后的?后 get数据

全局变量是window属性
Js中没有定义的的变量--报错
没有定义的属性--不报错

Open(方法,文件名,异步传输)
1.Get？Post?   2.读哪个文件  3.

同步 多件事一起  js中事件一件一件来

异步 一件一件来  js中多个事情一起来（Ajax）

如果同步的话，网速很慢，其他标签什么的都不会显

onreadystatechange和服务器交互的时候发生的事件

什么是服务器
网页浏览过程分析
如何配置自己的服务器程序（AMP）
什么是Ajax
无刷新数据读取
用户注册、在线聊天室
异步、同步
68.使用Ajax
基础：请求并显示静态TXT文件
字符集编码
缓存、阻止缓存
动态数据：请求JS（或json）文件
eval的使用Eval()；解析成js
DOM创建元素
局部刷新：请求并显示部分网页文件
69.HTTP请求方法
GET——用于获取数据（如：浏览帖子）
POST——用于上传数据（如：用户注册）
GET、POST的区别
get是在url里传数据：安全性、容量
缓存
（网址长度有限）

Get:通过网址
容量小
安全性非常差
有缓存
用于获取数据
Post:不通过网址，http
容量大（2G）
安全性好一点
没有缓存
向服务器传递信息

Ajax原理(id 给前台用，name给后台用)
Get请求
Get方式：放入url
70.编写Ajax

创建Ajax
ActiveXobject();针对IE6兼容
XMLHttpRequest();针对非IE6

创建Ajax对象
ActiveXObject("Microsoft.XMLHTTP")
XMLHttpRequest()
连接服务器
open(方法, 文件名, 异步传输)
同步和异步
发送请求
send()
71.请求状态监控
onreadystatechange事件
readyState属性：请求状态
0    （未初始化）还没有调用open()方法
1    （载入）已调用send()方法，正在发送请求
2    （载入完成）send()方法完成，已收到全部响应内容
3    （解析）正在解析响应内容
4    （完成）响应内容解析完成，可以在客户端调用了
status属性：请求结果
responseText
字符集
所有文件字符集相同
72.什么是cookie
页面用来保存信息
比如：自动登录、记住用户名
cookie的特性
同一个网站中所有页面共享一套cookie
数量、大小有限
过期时间
JS中使用cookie
document.cookie
73.cookie的使用
设置cookie
格式：名字=值
不会覆盖
过期时间：expires=时间
日期对象的使用
封装函数
读取cookie
字符串分割
删除cookie
已经过期
74.cookie的使用
例子
用cookie记录上次登录的用户名
提交时——记录用户名
window.onload——读取用户名
75.正则表达式
复习字符串操作
search			查找
substring		获取子字符串
charAt			获取某个字符
split			分割字符串，获得数组
找出字符串中的所有数字
用传统字符串操作完成
用正则表达式完成
76.什么是正则表达式
什么叫“正则”
规则、模式
强大的字符串匹配工具
是一种正常人类很难读懂的文字
RegExp对象
JS风格——new RegExp(“a”, “i”)
第二个参数i，忽略大小写,ignore
perl风格——/a/i
77.字符串与正则配合 - 1
search
字符串搜索
返回出现的位置
忽略大小写：i——ignore
判断浏览器类型
match
获取匹配的项目  把所有匹配的东西都找出来
量词：+
量词变化：\d、\d\d和\d+
全局匹配：g——global找到全部，全局匹配
例子：找出所有数字
replace
替换所有匹配
返回替换后的字符串
例子：敏感词过滤
任意字符
[abc]
例子：o[usb]t——obt、ost、out
范围
[a-z]、[0-9]
例子：id[0-9]——id0、id5
排除
[^a]
例子：o[^0-9]t——oat、o?t、o t
78.组合
[a-z0-9A-Z]
实例：偷小说
过滤HTML标签
自定义innerText方法
转义字符
.（点）——任意字符
\d、\w、\s
\D、\W、\S
79.什么是量词
出现的次数
{n,m}，至少出现n次，最多m次
例子：查找QQ号

常用量词
{n,}	至少n次
*		任意次	{0,}
？	零次或一次	{0,1}
+	一次或任意次{1,}
{n}	正好n次
80.表单校验实例
校验邮箱
行首行尾
81.Text 字符串一部分符合要求，就返回true
^行首  $行尾
/d == [0-9]
<.+> 任意个任意字符
82.
手机号：[1-9]\d{7}
Qq号：[1-9]\d{4-10}
固定号码:(0\d{2,3}-)?[1-9]\d{7} 
83.过滤html标签
Var re = /<[^<>]+>/g; 除了两个<>以外的所有字符
\d 相当于[0-9]
[^a-z0-9]匹配除了英文和数字以外的

Math.round四舍五入

JavaScript高级程序设计笔记
1.3个函数可以把非数值转换为数值：Number(),parseInt()和parseFloat()。
第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。
2.用parseInt()转换空字符串会返回NaN.
3. \n 换行，\ 制表，\b 退格，\r 回车，\\斜杠，\’单引号，\”双引号。
4.要把一个值转换为一个自字符串有两种方法：1.几乎每个值都有的toString()方法，唯一要做的就是返回相应的字符串表现。在不知道要转换的值是不是null或undefined的情况下，还可以使用转型函数String(),这个函数能够将任何类型的值转换为字符串。
5.valueOf():返回对象的字符串，数值或布尔值表示。
6.toLocaleString():返回对象的字符串表示，改字符串与执行环境的地区对应。
7.乘积超过了ECMAScript数值的表示范围，则返回Infinity或-Infinity.
8.Infinity与0相乘，则结果是NaN.
9.Return语句之后的任何代码都永远不会执行。
10.在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。
11.Arguments对象只是与数组类似（它并不是Array的实例），因为可以使用方法括号语句访问他的每一个元素（即第一个元素arguments[0],第二个元素arguments[1]...）。
12.Arguments对象的length属性可以获知有多少个参数传递给了函数。
13.没有传递值得命名参数将自动被赋予undefined值。（3.7.1）
14.没有重载。Js中定义了两个名字相同的函数，则改名字只属于后定义的函数。
15.ECMAScript中的基本数据类型包括undefined,null,Boolean,Number和String.
16.ECMAScript中也有一种复杂的数据类型，即Object类型。
17.对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法。（4.1.1）
18.不能给基本类型的值添加类型，尽管这样不会导致任何错误。只能给引用类型值动态地添加属性。
19.复制变量值，复制操作结束后，两个变量实际上将引用同一个对象，因此，改变其中一个变量，就会影响另一个变量。
20.对象时按值传递的。
21.即使在函数内部修改了参数的值，但原来的引用仍然保持未变。
22.Typeof操作符是确定一个变量是字符串，数值，布尔值，还是undefined的最佳工具。
23.在想知道某个对象是什么类型的，instanceof操作符。
24.所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。全局执行环境直到应用程序退出，例如关闭网页时才会被销毁。
25.当代码在一个环境中执行时，会创建变量对象的一个作用域链，其用途是保证对执行环境有权访问的所有变量和函数的有序访问。（4.2）
26.全局执行环境的变量对象始终都是作用域链中的最后一个对象。
27.Js中，if语句中的变量声明会将变量添加到当前的执行环境中。(4.4.2)
28.Js中没有块级作用域。
29.Var声明的变量会自动被添加到最接近的环境中。
30.对象时某个特定应用类型的实例。新对象是使用new操作符后跟一个构造函数来创建的。Var person = new Object();
31.创建object实例的方法有两种：
(1)New后面跟构造函数
var person = new Object();
  Person.name = “Alice”;
  Person.age = 29;
(2)对象自面量
Var person = {
name : “Alice”,
age : 29 
};属性名也可以用字符串”name” : “Alice”
32.使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，var person = {};//与new Object()相同。
33.访问对象属性时使用的都是点表示法。
34.在使用方括号语法时应该将要访问的属性以字符串的形式放在方括号中，alert(person[“name”]);//”Alice”alert(person.name);//”Alice”
35.方括号语法的主要优点是可以通过变量来访问属性，
Var properyName = “name”;alert(person[propertyName]);//”A
36.ECMAScript数组的每一项可以保存任何类型的数据。
37.创建数组的基本方式有两种。(1)使用Array构造函数
Var colors = new Array();（5.2）
38.如果预先知道数组要保存的项目数量，也可以给构造函数传递该数量，而该数量会自动变成length属性的值。
Var colors = new Array(20);
39.也可以向Array构造函数传递数组中应该包含的项。
Var colors = new Array(“red”,”blue”,”green”);
40.给构造函数传递一个值也可以创建数组，如果传递的是数值，则会按照该数值创建包含给定项数的数值；而如果传递的是其他类型的函数，则会创建包含那个值得只有一项的数组。Var colors = new Array(3);创建一个包含3箱的数组
Var colors names = new Array(“Alice”);创建一个包含1项，即字符串”Alice”的数组。
41.在使用Array构造函数是也可以省略new操作符，
Var colors = Array(3);
42.创建数组的第二种基本方式是使用数字字面量表示法，数组字面量由一堆包含数组项的方括号表示，多个数组项之间以都好隔开，
Var colors = [“red”,”blue”,”green”];//创建一个包含3个字符串的数组。Var names = [];//创建一个空数组
43.在读取和设置数组的值时，要使用方括号提供相应值的基于0的数字索引。
Var colors = [“red”,”blue”,”green”];
Alert(colors[0]);
Colors[2] = “brown”;
44.数组的项数保存在其length属性中，这个属性始终会返回0或者更大的值。
Var colors = [“red”,”blue”,”green”];var names = [];
Alert(colors.length);3
Alert(names.length);0
45.数组的length属性：它不是只读，可以从数组的末尾移除项或向数组中添加新乡。
Var colors = [“red”,”blue”,”green”];var names = [];
Colors.length = 2;
Alert(color[2]);//undefined
Var colors = [“red”,”blue”,”green”];var names = [];
Colors.length = 4;
Alert(color[3]);//undefined
Var colors = [“red”,”blue”,”green”];
Colors[colors.length] = “black”;//在位置3添加一种颜色
46.数组最后一项的索引始终是length-1，因此下一个位置就是length。
47.Var colors = [“red”.”blue”,”green”];
Colors[99] = “black”;
Alert(colors.length);//100
48.确定某个对象是不是数组，instanceof操作符。If(value instanceof Array){ //对数组执行某些操作}
49.所有对象都具有toLocaleString(),toString(),valueOf()方法。
调用的toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。调用valueOf()返回的还是数组。
50.toLocaleString()方法经常也会返回余toString()和valueOf()方法相同的值，但也不总是如此。当调用数组的toLcaeString()方法是，也会创建一个数组值的以逗号分隔的字符串。而与前两个方法唯一不同之处在于，这一次为了取得每一项的值，调用的是每一项的toLcaleString()方法，而不是toString()方法。
51.使用join()方法，则可以使用不同的分隔符；来构建这个字符串。Alert(colots.join(“||”));red||green||blue(5.2.2)
52.Push()方法可以接受任意数量的参数，把他们逐个添加到数组末尾，并返回修改后数组的长度。
53.Pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除项。（5.2.3）
54.模拟队列只需一个从数组前端取得项的方法，shift()方法,t它能移除数组中的第一个项并返回该项，同时将数组长度减1.
55.Unshift()方法，它能在数组前端添加个项并返回新数组的长度。
56.重排序：resverse()和sort();
57.Sort()方法按升序排列数组项--即最小的值位于最前面，最大的值位于最后面。
58.Sort()方法会调用每个数组项的toString()转型，然后比较得到的字符串，以确定如何排序。Sort()方法比较的也是字符串。
59.valueOf()方法会返回数值类型的对象，function compare(value1,value2){return value2-value1;}
60.Concat()方法可以基于当前数组中的所有项创建一个新数组。这个方法先创建当前数组一个副本，然后接收到的参数添加到这个副本的末尾，最后返回新构建的数组。
61.Slice()方法它能够基于当前数组中的一或多个项创建一个新数组。
62.Slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。如果两个参数，该方法起始和结束位置之间的项--不包括结束位置的项。不会影响原始数组。
63.Splice()方法，用途向数组的中部插入项。
（1）删除：要删除的第一项的位置和要删除的项数，splice(0,2);会删除数组中的前两项。
（2）插入：向指定位置插入任意数量的项。起始位置，0（要删除的项数），和要插入的项。Splice(2,0,”red”,”blue”);从当前位置2插入字符串。
（3）替换：向指定位置插入任意数量的项。且同时删除任意数量的项。起始位置，要删除的项数，要插入的任意数量的项。Splice(2,1,”red”,”green”);
64.两个位置方法：indexOf()和lastIndexOf().接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。indexOf()方法从数组的开头（位置0）开始向后找，lasIndexOf()从末尾开始找。（5.2.7）
65.这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1.
66.迭代方法
传入这些方法的函数会接收三个参数：数组项的值，该项在数组中的位置和数组对象本身。
（1）every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true.
（2）Filter()：对数组中的每一项运行给定函数，返回该函数会返回true的数组。
（3）forEach():对数组中的每一项运行给定函数，这个方法没有返回值。
（4）Map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
（5）Some()：对数组中的每一项运行给定函数，如果函数对任一项返回true,则返回true。
67.map()方法适合创建包含的项与另一个数组意义对应的数组。
68.forEach()他是对数组中的每一项运行传入的函数。
69.归并数组的方法：reduce()和reduceRight().这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。（5.2.9）
Reduce()方法从数组的第一项开始，组个遍历到最后。而reduceRight()则数组的最后一项开始，向前遍历到第一项。
这两个方法都接受两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。
传给reduce()和reduceRight()的函数接受4个参数：前一个值，当前值，项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。
70.Date.parse()方法接受一个表示日期的字符串参数。
71.一个正则表达式就是一个模式与g(表示全局模式，即模式将被应用于所有字符串，而非在发现第一个匹配项是立即停止），i（不区分大小写模式），m（多行模式，即在到达一行文本末尾是还会继续查找下一行中是否存在于模式匹配的项）。（5.4）
72.与其他语言中的正则表达式类似，模式中使用的所有元字符都必须转义。正则表达式中的元字符包括：( [ { \ ^ $ | ) ? * + . ] }
73.RegExp的每个实例都具有下列属性：
(1)galobal:布尔值，表示是否设置了g标志。
(2)ignoreCase:布尔值，表示是否设置了i标志。
(3)lastIndex:整数，表示开始搜索下一个匹配项的字符位置，从0算起。
(4)Multiline:布尔值，表示是否设置了m标志。
74.RegExp对象的主要的方法是exec()，该方法是专门为捕获组而设计的。（5.4.2）
75.在同一个字符串上多次调用exec()将始终返回死一个匹配的信息。而在设置全局标志的情况下，每次调用exec()则都会在字符串中据需查找新的匹配项。全局模式lastIndex的值每次调用exec()后都会增加，而在非全局模式下则始终保持不变。
76.正则表达式的第二个方法是text()，他接受字符串参数，在只想知道目标字符串与某个模式是否匹配，并不需要知道其文本内容的情况下，当使用这个方法非常方便。
77.解析器会率先读取函数声明，宁使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。
78.默认情况下，sort()方法会调用每个对象的toString()方法以确定他们的次序。
79.函数内部，有连个特殊的对象：arguments和this.
80.Arguments的主要用途是保存函数参数，这个对象还有一个名叫callee属性，该属性时一个指针，这项拥有这个arguments对象的函数。
81.函数对象属性：caller。这个属性中保存着调用当前函数的函数的引用。
82.不能为函数的caller属性赋值。
83.Length属性表示函数希望接受的命令参数的个数。
84.Prototype是保存它们所有实例方法的真正所在。Prototype是不可枚举的。
85.每个函数都包含两个非继承而来的方法：apply()和cal()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。
86.在使用call()方法时，传递给函数的参数必须逐个列举出来。
87.Call()和apply()真正强大的地方是能扩充函数赖以运行的作用域。
88.Bind()，这个方法会创建一个函数的实例。其this值会被绑定到传给bind()函数的值。
89.3个特殊的引用类型：Boolean,Number,String.（5.6）
90.引用类型与基本包装类型的主要区别就是对象的生存期。
91.自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。
92.对基本包装类型的实例用typeof回返回“object”,而且所有基本包装类型的对象都会被转换为布尔值true。
93.Typeof确定一个变量是字符串，数值，布尔值，还是undefined，检测基本类型。
94.布尔表达式中的所有对象都会被转换为true。
95.Instanceof 检测引用类型。
96.toFixed()方法会按照指定的小数位返回数值的字符串表示。
97.valueOf(),toLocaleString(),toString()方法，都返回对象所表示的基本字符串值。
98.两个用于访问字符串中特定字符串是：charAt()和charCodeAt()。这两个方法都接受一个参数，即基于0的字符位置。
Var stringValue = “hello world”;
Alert(stringValue.charAt(1));//e
99.如果想得到的是字符编码，使用charCodeAt().
Var stringValue = “hello world”;
Alert(stringValue.charCodeAt(1));//101
100.使用方括号加数字索引来访问字符串中的特定字符。
Var stringValue = “hello world”;
Alert(stringValue[1]);//e
101.cancat()用于将一或多个字符串拼接起来，返回拼接得到的心字符串。
102.三个基于字符串创新新字符串的方法：slice(),substr(),substring()，这三个方法都会返回被操作字符串的一个子字符串，而且也都接受一或两个参数。第一个参数指定子字符串的开始位置，第二个参数表示子字符串的位置。而substr()的第二个参数指定的则是返回的字符个数。
103.在传递给这些方法的参数是负数的情况下，他们的行为就不尽相同了。Slice()方法会将传入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0.substring()方法会把所有负值参数都转换为0.
104.Substring()方法会将较小的数作为开始位置，将较大的数作为结束位置。Substr()方法没有这个功能。
105.从字符串中查找子字符串的方法：indexOf()和lastIndexOf()。返回子字符串的位置，如果没有找到该子字符串，则返回-1.
106.indexOf()方法凶字符串的开头向后搜索子字符串，而lastindexOf()方法是从字符串的末尾向前搜索子字符串。
107.这两个方法都可以接收两个参数，表示从哪个位置开始搜索，indexOf()从该参数指定的位置向后搜索，lastIndexOf()则会从指定的位置向前搜索。
108.Trim()方法,这个方法会创建一个字符串的副本，删除前置及后缀的所有空格，然后返回结果。
109.TrimLeft()和trimRight()方法，分别删除字符串开头和结尾的空格。
110.字符串大小写转换方法：toLowerCase()和toUpperCase()是经典方法，toLocaleLowerCase()和toLocaleUpperCase()方法则是针对特定地区的实现。
111.String类型定义几个用于在字符串中匹配模式的方法。(1).match()方法只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象。
112.用于查找模式的方法是search()。这个方法的唯一参数与match()相同，search()方法始终是从字符串开头向后查找模式。
113.Replace()方法，接受两个参数，一个参数可以是一个RegExp对象或者一个字符串，第二个线数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。，要想替换所有子字符串，唯一办法就是提供一个正则表达式，指定全局（g）。
114.Replace()方法的第二个参数也可以是一个函数，在只有一个匹配项情况下，会向这个函数传递3个参数：模式的匹配项，模式匹配项在字符串的位置和原始字符串。
115.Split()，这个方法基于指定的分隔符将一个字符串分隔成多个子字符串，并将结果放在一个数组中。
116.localeCompare()，这个方法比较两个字符串，并返回下列值中的一个：
(1).如果字符串在字母表中应该在字符串之前，则返回负数。
(2)如果等于字符串参数，则返回0；
(3)如果字符串在字母表中应该排在字符串参数值后，则返回一个正数；
117.fromCharCode()方法，接收以或多个字符编码，人后将它们转换一个字符串。
Alert(String.fromCharCode(104,101,108,108,111);//hello
118.eval()方法，就像一个完整的ECMAScript解析器，即要执行的ECMAScript。
119.Eval(“alert(‘hi’)”);相当于alert(‘hi’);
120.Math.random()方法返回大于等于0小于1的随机数。
121.值 = Math.floor(Math.random() *可能值的总数 + 第一个可能的值)
122.多数情况下，可以通过一个函数来计算可能值的总数和第一个可能的值。selectFrom()接受两个参数，一个最小值，一个最大值。最大值减最小值加1，就是总数。
123.定义函数有两种方法：一种是函数声明，另一种是函数表达式。
124.函数声明语法：function functionName(arg0,arg1,arg2){..}
125.函数表达式：
var functionName = function(arg0,arg1,arg2){...函数体...};
126.闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。
127.闭包只能取得包含函数中任何变量的最后一个值。闭包所保存的是整个变量对象，而不是某个特殊的变量。（7.2.1）
128.This对象时在运行时基于函数的执行环境绑定的；在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。

129.文档节点是每个文档的根节点。（10章）
130.在HTML页面中，文档元素永远是<html>元素。
131.Node类型，每个节点都有一个nodeType属性，用于表明节点的类型。
132.节点类型有在Node类型中定义的下列12个数值常量来表示：任何节点类型必居其一：
(1).Node.ELEMENT_NODE(1);
(2).Node.ATTRIBUTE_NODE(2);
(3).Node.TEXT_NODE(3);
(4).Node.CDATA_SECTION_NODE(4);
(5).Node.ENTITY_REFERENCE_NODE(5);
(6).Node.ENTITY_NODE(6);
(7).Node.PROCESSING_INSTRUCTION_NODE(7);
(8).Node.COMMENT_NODE(8);
(9).Node.DOCUMENT_NODE(9);
(10).Node.DOCUMENT_TYPE_NODE(10);
(11).Node.DOCUMENT_FRAGMENT_NODE(11);
(12).Node.NOTATION_NODE(12);
133.通过比较上面这些常量，可以很容易地确定节点的类型，例如：if (someNode.nodeType == 1){
Alert(“Node is an element.”);
	}




















